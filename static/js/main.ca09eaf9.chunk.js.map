{"version":3,"sources":["reducers/index.js","reducers/general.js","reducers/entities.js","store/index.js","serviceWorker.js","actions/index.js","components/modules/is-fetching/is-fetching-loader.jsx","components/modules/is-fetching/is-fetching-error.jsx","components/modules/is-fetching/index.jsx","components/modules/post/comments.jsx","components/modules/post/index.jsx","components/main-content/main-content-posts.jsx","components/main-content/index.jsx","app.js","index.js"],"names":["reducers","combineReducers","generalStates","state","arguments","length","undefined","Immutable","isFetchingPosts","isFetchingComments","error","action","type","withMutations","map","set","entities","posts","comments","data","middleware","applyMiddleware","apply","concat","thunk","store","createStore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","errorMessage","getPosts","dispatch","fetch","response","ok","getPostsError","status","json","getComments","getCommentsError","IsFetchingLoader","react_default","a","createElement","className","Component","IsFetchingError","this","props","IsFetching","_this$props","isFetching","is_fetching_loader_IsFetchingLoader","is_fetching_error_IsFetchingError","children","Comments","post","get","filter","comment","slice","key","SinglePost","showComments","comments_Comments","MainContentPosts","_this","pagination","size","sortBy","d","index","post_SinglePost","Object","assign","defaultProps","MainContent","is_fetching_IsFetching","main_content_posts_MainContentPosts","App","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","value","main_content_MainContent","connect","bindActionCreators","actions","ReactDOM","render","es","app","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ca09eaf9.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { generalStates } from './general';\nimport { entities } from './entities';\n\nexport const reducers = combineReducers({\n  generalStates,\n  entities\n});","import * as Immutable from 'immutable';\n\nexport function generalStates(state = Immutable.fromJS({\n  isFetchingPosts: true,\n  isFetchingComments: true,\n  error: ''\n}), action){\n  switch(action.type){\n    case 'GET_POSTS_START':\n      return state.withMutations((map) => {\n        map.set('isFetchingPosts', true)\n          .set('error', '')\n      })\n    case 'GET_POSTS_ERROR':\n      return state.withMutations((map) => {\n        map.set('isFetchingPosts', false)\n          .set('error', action.error)\n      })\n    case 'GET_POSTS_END':\n      return state.set('isFetchingPosts', false)\n    case 'GET_COMMENTS_START':\n      return state.withMutations((map) => {\n        map.set('isFetchingComments', true)\n          .set('error', '')\n      })\n    case 'GET_COMMENTS_ERROR':\n      return state.withMutations((map) => {\n        map.set('isFetchingComments', false)\n          .set('error', action.error)\n      })\n    case 'GET_COMMENTS_END':\n      return state.set('isFetchingComments', false)\n    default:\n      return state;\n  }\n}","import * as Immutable from 'immutable';\n\nexport function entities(state = Immutable.fromJS({\n  posts: [],\n  comments: []\n}), action){\n  switch(action.type){\n    case 'GET_POSTS_END':\n      return state.set('posts', Immutable.fromJS(action.data))\n    case 'GET_COMMENTS_END':\n      return state.set('comments', Immutable.fromJS(action.data))\n    default:\n      return state;\n  }\n}","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport freeze from \"redux-freeze\";\nimport { reducers } from \"../reducers/index\";\n\nlet middlewares = [];\n\nif (process.env.NODE_ENV !== 'production')\n  middlewares.push(freeze);\n\nlet middleware = applyMiddleware(...middlewares, thunk);\n\nif (process.env.NODE_ENV !== 'production' && window.devToolsExtension)\n  middleware = compose(middleware, window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst store = createStore(reducers, middleware);\nexport { store }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const errorMessage = `Error inesperado, intente nuevamente, tipo de error:`;\n\nexport function getPosts(){\n  return function action(dispatch){\n    dispatch(getPostsStart());\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => {\n        if(!response.ok){ dispatch(getPostsError(`${errorMessage} ${ response.status }`)); console.error(`${errorMessage} ${ response.status }`) }\n        return response.json();\n      })\n      .then((response) => {\n        dispatch(getPostsEnd(response));\n      })\n      .catch((response) => {\n        dispatch(getPostsError(`${errorMessage} ${ response.status }`));\n        console.error(`${errorMessage} ${ response.status }`)\n      });\n  }\n}\n\nfunction getPostsStart(){\n  return {\n    type: 'GET_POSTS_START'\n  }\n}\n\nfunction getPostsError(error){\n  return {\n    type: 'GET_POSTS_ERROR',\n    error\n  }\n}\n\nfunction getPostsEnd(data){\n  return {\n    type: 'GET_POSTS_END',\n    data\n  }\n}\n\nexport function getComments(){\n  return function action(dispatch){\n    dispatch(getCommentsStart());\n    fetch('https://jsonplaceholder.typicode.com/comments')\n      .then((response) => {\n        if(!response.ok){ dispatch(getCommentsError(`${errorMessage} ${ response.status }`)); console.error(`${errorMessage} ${ response.status }`) }\n        return response.json();\n      })\n      .then((response) => {\n        dispatch(getCommentsEnd(response));\n      })\n      .catch((response) => {\n        dispatch(getCommentsError(`${errorMessage} ${ response.status }`));\n        console.error(`${errorMessage} ${ response.status }`)\n      });\n  }\n}\n\nfunction getCommentsStart(){\n  return {\n    type: 'GET_COMMENTS_START'\n  }\n}\n\nfunction getCommentsError(error){\n  return {\n    type: 'GET_COMMENTS_ERROR',\n    error\n  }\n}\n\nfunction getCommentsEnd(data){\n  return {\n    type: 'GET_COMMENTS_END',\n    data\n  }\n}","import React, { Component } from 'react';\n\nexport default class IsFetchingLoader extends Component{\n  render(){\n    return(\n      <div className=\"box-loader\">\n        <div className=\"loader\"></div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class IsFetchingError extends Component{\n  render(){\n    const { error } = this.props;\n\n    return(\n      <p className=\"error-message\">{ error }</p>\n    )\n  }\n}\n\nIsFetchingError.propTypes = {\n  error: PropTypes.string\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport IsFetchingLoader from './is-fetching-loader';\nimport IsFetchingError from './is-fetching-error';\n\nexport default class IsFetching extends Component{\n  render(){\n    const { isFetching, error } = this.props;\n\n    if(isFetching)\n      return <IsFetchingLoader />\n\n    if(error)\n      return <IsFetchingError error={ error } />\n\n    return this.props.children;\n\n  }\n}\n\nIsFetching.propTypes = {\n  isFetching: PropTypes.bool,\n  error: PropTypes.string\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Comments extends Component{\n  getComments(){\n    const { post, entities } = this.props,\n          postComments = entities.get('comments').filter((comment) => {\n            return comment.get('postId') === post.get('id');\n          }).slice(0, 3);\n\n     return postComments.map((comment) => {\n       return (\n        <div className=\"comment-box\" key={ `comment-${comment.get('id')}` }>\n          <h4>{ `${comment.get('name')} - ${ comment.get('email') }:`  }</h4>\n          <p>{ comment.get('body') }</p>\n        </div>\n        )\n     })\n  }\n  render(){\n    return(\n      <div className=\"comments-box\">\n        <h3>Comentarios:</h3>\n        <ul>\n          { this.getComments() }\n        </ul>\n      </div>\n    )\n  }\n}\n\nComments.propTypes={\n  post: PropTypes.object\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Comments from './comments';\n\nexport default class SinglePost extends Component{\n  render(){\n    const { post, showComments } = this.props;\n\n    return (\n      <article className=\"box\">\n        <h3>{ post.get('title') }</h3>\n        { showComments ? <Comments { ...this.props } /> : null }\n      </article>\n    )\n  }\n}\n\nSinglePost.propTypes = {\n  post: PropTypes.object,\n  showComments: PropTypes.bool\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport IsFetchingError from '../modules/is-fetching/is-fetching-error';\nimport SinglePost from '../modules/post/index';\n\nexport default class MainContentPosts extends Component{\n  render(){\n    const { entities, pagination } = this.props;\n    if(!entities.get('posts').size){ return <IsFetchingError error=\"No se han encontrado posts\" /> }\n\n    const filteredData = entities.get('posts').sortBy((d) => d.get('id')).filter((d) => d.get('title')).slice(0, pagination);\n\n    return filteredData.map((post, index) => {\n      return <SinglePost key={ `post-${post.get('id')}` } post={ post } showComments={ index === 0 } { ...this.props }/>\n    });\n  }\n}\n\nMainContentPosts.propTypes = {\n  pagination: PropTypes.number\n}\n\nMainContentPosts.defaultProps = {\n  pagination: 10\n}\n\n","import React, { Component } from 'react';\n\nimport IsFetching from '../modules/is-fetching/index';\nimport MainContentPosts from './main-content-posts';\n\nexport default class MainContent extends Component{\n  componentDidMount(){\n    this.props.getPosts();\n    this.props.getComments();\n  }\n  render(){\n    const { generalStates } = this.props;\n    return (\n      <IsFetching \n        isFetching={ generalStates.get('isFetchingPosts') || generalStates.get('isFetchingComments')}\n        error={ generalStates.get('error') }\n      >\n        <h1>Last 10 Posts</h1>\n        <MainContentPosts { ...this.props } />\n      </IsFetching>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport * as actions from './actions/index';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport MainContent from './components/main-content/index';\n\nexport class App extends Component{\n  render(){\n    return (\n      <section className=\"app-container\">\n        <MainContent { ...this.props } />\n      </section>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(actions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index.js';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('app')\n);\n\nserviceWorker.register();\n\n"],"sourceRoot":""}